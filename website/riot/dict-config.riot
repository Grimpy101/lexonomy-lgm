<dict-config>
   <dict-nav links={[["config", "Configure"]]}/>
   <h1>Configuration</h1>
   <div class="row" if="{!state.isResaving && state.stats && state.stats.needUpdate > 0}">
      Your dictionary needs to be re-indexed ({state.stats.needUpdate} entries). <button class="btn" style="margin-left: 15px;" onclick="{resave}">Do it now </button>
      <br>
      <span style="opacity: 75%; font-size: 80%;">You don't have to do this right now. But your dictionary may take longer to load, and searching entries may not always return the results you expect until you re-index.</span>
   </div>
   <div if="{state.isResaving}">
      <span>{state.resaveProgressMessage || 'Re-indexing...'}</span>
      <br>
      <span style="opacity: 75%; font-size: 80%;">You may close or leave this window at any time to pause the process, and return later to resume.</span>
   </div>
   <div class="columnContainer"
         style="margin-left: 20px;">
      <div>
         <h3 class="header">Manage dictionary</h3>
         <ul>
            <li>
               <a href="#/{ dictData.dictId }/config/ident">Description</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/users">Users</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/publico">Publishing</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/url">Change URL</a>
            </li>
         </ul>
      </div>
      <div>
         <h3 class="header">Entry settings</h3>
         <ul>
            <li>
               <a href="#/{ dictData.dictId }/config/xema">Structure</a>
            </li>
            <li if={ !dictData.xemplateOverride }>
               <a href="#/{ dictData.dictId }/config/xemplate">Formatting</a>
            </li>
            <li if={ dictData.xemplateOverride } >
               <a href="#/{ dictData.dictId }/config/xemplate-override">Formatting</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/titling">Headword list</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/searchability">Searching</a>
            </li>
         </ul>
      </div>
      <div style="margin-right: auto;">
         <h3 class="header">Expert settings</h3>
         <ul>
            <li>
               <a href="#/{ dictData.dictId }/config/editing">Entry editor</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/flagging">Flags</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/autonumber">Auto-numbering</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/links">Linking</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/download">Download settings</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/subbing">Subentries</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/ske">Sketch Engine</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/kontext">KonText</a>
            </li>
            <li>
               <a href="#/{ dictData.dictId }/config/gapi">Multimedia API</a>
            </li>
         </ul>
      </div>
   </div>

   <style>
      .columnContainer{
         display: flex;
         gap: 4vw;
         justify-content: space-between;
         margin: auto;
      }
      li{
         padding: 0 0 0.7rem 0.7rem;
      }
   </style>

   <script>
      export default {
         bindings: [["store", "dictionaryChanged", "update"]],
         state: {
            stats: {},
            isResaving: false,
            resaveProgressMessage: '',
         },
         
         onMounted() {
            this.getStats();
            this.state.isUnmounted = false; // I don't think components are re-used, but just in case.
         },
         onUnmounted() {
            this.state.isUnmounted = true;
         },

         getStats() {
            $.get(`${this.dictData.dictId}/stats.json`).then(r => this.update({stats: r}));
         },
         async resave() {
            if (this.state.isResaving) return;
            this.update({isResaving: true});
            while (true && !this.state.isUnmounted) {
               try {
                  const {progressMessage, finished, errors} = await $.post(`${this.dictData.dictId}/resave.json`);
                  if (finished) {
                     this.update({isResaving: false});
                     return;
                  }
                  this.update({resaveProgressMessage: progressMessage});
               } catch (e) {
                  this.update({isResaving: false});
                  break
               }
            }
         }
      }
   </script>
</dict-config>
