<dict-config-links>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["links", "Linking"]]}/>
   <h1>Manual linking between entries</h1>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <div>
      <p>Elements listed here can be used as target of cross-reference link. For each element, specify unique identifier in the form of placeholders <tt>'%(element)'</tt>. Eg. element <tt>entry</tt> can have identifier <tt>%(lemma)-%(pos)</tt>, element <tt>sense</tt> can have identifier <tt>%(lemma)-%(number)</tt>. Optionally, specify element you want to show as preview when selecting links.</p>
      <template if={!state.isLoading}>
         <table if={state.data.elements.length}>
            <thead>
               <tr>
                  <th>Linking element</th>
                  <th>Identifier</th>
                  <th>Preview</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (element, idx) in state.data.elements }
                     idx={ idx }>
                  <td>
                     <div class="input-field">
                        <select linkelement={element.linkElement}></select>
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text"
                              value={ element.identifier }
                              name="identifier"
                              onchange={onItemChange} />
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text"
                              value={ element.preview }
                              name="preview"
                              onchange={onItemChange}/>
                     </div>
                  </td>
                  <td>
                     <a class="btn btn-floating right"
                           data-element={ element.linkElement }
                           onclick={ doDeleteEl.bind(this, element.linkElement) }>
                        <i class="material-symbols-outlined">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <div class="buttons">
            <button class="btn {state.unusedElements.length ? '' : 'disabled'}"
                  onclick={ doAddEl }>
               add element
               <i class="material-symbols-outlined right">add</i>
            </button>
         </div>
      </template>
      <br><br>
      <div>
         <h2>Automatic linking using NAISC</h2>
      </div>
      <div>
         <div>
            <label for="otherdict">Other dictionary code</label>
         </div>
         <div class="input-field inlineBlock"
               style="max-width: 400px;">
            <input type="text"
                  id="otherdict"/>
         </div>
         <div class="input-field inlineBlock">
            <button id="naisc_link"
                  class="btn waves-effect waves-light {state.isLinking || state.isChecking ? 'disabled' : ''}"
                  onclick={ startLinking }
                  style="margin-left: 10px;">Start linking</button>
         </div>
      </div>
      <div if={state.info}
            class="section">
         <div class="message messageInfo">
            <raw-html content={state.info}></raw-html>
         </div>
      </div>
      <div>
         <h2>Automatic linking using Babelnet</h2>
         <div if={state.data.babelnet_id == ''}>
            <button id="babelnet_link"
                  class="btn waves-effect waves-light"
                  onclick={ startBabelnet }
                  style="margin-left: 10px;">Start linking</button>
         </div>
         <div if={state.data.babelnet_id != ''}>
            <p>Babelnet linking status: ({ state.data.babelnet_id }) <span id="babelnet-status"/>
            <button id="babelnet_error"
                  class="btn waves-effect waves-light"
                  onclick={ clearBabelnet }
                  style="margin-left: 10px;display:none;">Dismiss error</button>
            </p>
         </div>
      </div>
   </div>

   <style>
      tbody tr{
         border-bottom: none;
      }
      th, td{
         padding: 10px 10px 0 0;
      }
      td{
         vertical-align: top;
      }
      td .input-field{
         margin: 0;
      }
   </style>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            isLinking: false,
            isChecking: true,
            unusedElements: [],
            data: {elements: [], babelnet_id: ''},
            info: "",
            checkDelay: 1000
         },

         doDeleteEl(element) {
            this.state.data.elements = this.state.data.elements.filter(val => val.linkElement != element)
            this.update()
         },

         doAddEl(event) {
            this.state.data.elements.push({
               linkElement: this.state.unusedElements[0],
               identifier: "", preview: ""
            })
            this.update()
         },

         onMounted() {
            this.store.loadDictionaryConfig("links")
               .done(response => {
                  if (response.content.babelnet_id != undefined) {
                     this.state.data.babelnet_id = response.content.babelnet_id;
                  }
                  this.state.data.elements =Object.values(response.content).filter(el => el.linkElement != undefined);
               })
               .always(() => {
                  this.update({isLoading: false})
               })

            //check NAISC status
            this.store.linkingCheckIfRunning()
                  .done(response => {
                     if (response.bgjob != -1) {
                        this.state.info = "Linking to '" + response.otherdictID + "' already in progress, please wait..."
                        this.waitForLinking(response.otherdictID, response.bgjob)
                     }
                  })
                  .always(() => {
                     this.update({isChecking: false})
                  })

         },

         onBeforeUpdate(){
            this.refreshUnusedElements()
         },

         onUpdated() {
            //check Babelnet status
            if (this.state.data.babelnet_id != '') {
               $.post(window.API_URL + this.dictData.dictId + '/babelnet',{babelnet_id: this.state.data.babelnet_id}, (response) => {
                  $('#babelnet-status').html(response.state)
                  if (response.state == 'ERROR') {
                     $('#babelnet_error').show();
                  }
               });
            }

            if (this.dictData.config.xema && this.dictData.config.xema.elements) {
               $("select").each(function(idx, el){
                  var $select = $(el)
                  var instance = M.FormSelect.getInstance(el)
                  $select.off("change", this.onElementChange)
                  instance && instance.destroy()
                  $select.empty()
                  var key = $select.attr("linkelement")
                  $select.append(`<option value="${key}" selected}>${key}</option>`)
                  this.state.unusedElements.forEach(key => {
                     $select.append(`<option value="${key}">${key}</option>`)
                  })
                  $('select').formSelect()
                     .on("change", this.onElementChange)
               }.bind(this))
            }
         },

         onElementChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.state.data.elements[idx].linkElement = $(evt.target).find("option:selected").attr("value")
            this.update()
         },

         onItemChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.state.data.elements[idx][evt.target.name] = evt.target.value
         },

         refreshUnusedElements(){
            var savedElements = this.state.data.elements.map(e => e.linkElement)
            this.state.unusedElements = Object.keys(this.dictData.config.xema.elements).filter(el => {
               return !savedElements.includes(el)
            })
         },

         startBabelnet() {
            $.post(window.API_URL + this.dictData.dictId + '/babelnet', (response) => {
               if (response.babelnet_id != undefined && response.babelnet_id != '') {
                  this.state.data.babelnet_id = response.babelnet_id;
                  this.saveData();
               }
            });
         },

         clearBabelnet() {
            this.state.data.babelnet_id = '';
            this.saveData();
         },

         startLinking() {
            var otherdictID = $("#otherdict").val()
            if(otherdictID){
               this.update({
                  isLinking: true,
                  info: "Initiating linking..."
               })
               this.store.startLinking($("#otherdict").val())
                     .done(response => {
                        this.update({
                           info: "Linking in progress, please wait...",
                           checkDelay: 1000
                        })
                        this.waitForLinking(otherdictID, response.bgjob)
                     })
                     .fail(() => {
                        this.update({
                           isLinking: false,
                           info: "Linking failed."
                        })
                     })
            }
         },

         waitForLinking(otherdictID, jobID) {
            this.store.linkingGetProgress(otherdictID, jobID)
                  .done(response => {
                     if (response.status == "finished") {
                        this.update({
                           isLinking: false,
                           info: "Linking done. <a href='#/" + this.dictData.dictId + "/links'>See results.</a>"
                        })
                     } else if (response.status == "failed") {
                        this.update({
                           isLinking: false,
                           info: "Linking failed"
                        })
                     } else {
                        this.state.checkDelay = this.state.checkDelay < 60000 ? this.state.checkDelay + 2000 : 60000
                        setTimeout(this.waitForLinking.bind(this, otherdictID, jobID), this.state.checkDelay)
                     }
                  })
                  .fail(() => {
                     this.update({
                        isLinking: false,
                        info: "Linking failed"
                     })
                  })
         },

         saveData() {
            var data = {}
            this.state.data.elements.forEach(item => {
               data[item.linkElement] = item
            })
            data['babelnet_id'] = this.state.data.babelnet_id;
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("links", data)
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

</dict-config-links>
