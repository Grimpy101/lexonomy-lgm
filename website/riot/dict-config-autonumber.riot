<dict-config-autonumber>
   <loading-overlay if={state.isSaving}/>
   <dict-nav links={[["config", "Configure"], ["autonumber", "Auto-numbering"]]}/>
   <h1>Auto-numbering of elements</h1>
   <dict-config-buttons save-data={saveData}>
      <a class="btn waves-effect waves-light"
            onclick={ addNumbers }
            id="submit_button">
         <i class="material-symbols-outlined right">add</i>Save &amp; autonumber
      </a>
   </dict-config-buttons>
   <div class="row">
      <p>If you need to number some of entry elements automatically, Lexonomy can do that for you. First, go to Entry structure and add element/attribute where you want to store the number. Eg. in element <tt>sense</tt> add attribute <tt>number</tt>. When you're ready, select element to number (eg. <tt>sense</tt>) and element/attribute to store numbering (eg. <tt>@number</tt>). Lexonomy will fill the numbers where missing.</p>
   </div>
   <hr>
   <template each={config in Object.values(state.data).sort()}>
      <div class="row">
         <div class="input-field col s4">
            <select onchange={changeElement.bind(this, config)} class="browser-default">
               <option selected value={config.element}>{config.element}</option>
               <option each={el in getUnusedElements()} value={el}>{el}</option>
            </select>
            <label>Element to number</label>
         </div>
         <div id="hasChildren" class="input-field col s4">
            <select name="children" onchange={setWithEvent.bind(this, config, 'target')} class="browser-default">
               <option value="" selected={config.target === ""}>{config.element} itself</option>
               <option each={attribute in getAttributesForElement(config.element)} value=@{attribute} selected={config.target === '@' + attribute}>@{attribute}</option>
               <option each={childElement in getChildElementsForElement(config.element)} value={childElement} selected={config.target === childElement}>{childElement}</option>
            </select>
            <label for="children">Add numbers to</label>
         </div>
         <div class="input-field col s4">
            <button type="button" class="btn waves-effect waves-light" onclick={deleteElement.bind(this, config.element)} style="height:3rem;">Remove</button>
         </div>

         <div id="hasNoChildren"
               class="input-field col s4 grey-text"
               style="display: none; padding-top: 10px;">
            element has no children
         </div>


         <div class="col s12">
            <label>
               <input name={config.element + 'autoApply'} type="radio" class="with-gap" value="false" checked={ config.auto_apply } onchange={set.bind(this, config, 'auto_apply', true)}/>
               <span>Apply numbers automatically</span>
            </label>
            <br>
            <label>
               <input name={config.element + 'autoApply'} type="radio" class="with-gap" value="true" checked={ !config.auto_apply } onchange={set.bind(this, config, 'auto_apply', false)}/>
               <span>Only run numbering manually</span>
            </label>
         </div>

         <h3 class="col s12" style="margin-top: 2rem;">What to do with existing values</h3>
         <div class="col s12" style="padding-left: 2.75rem;">
            <label>
               <input name="existingValues" id="existingValues_keep" type="radio" class="with-gap" value="false" checked={ !config.overwrite_existing } onchange={set.bind(this, config, 'overwrite_existing', false)}/>
               <span><b>Keep</b> existing values</span>
            </label>
            <br>
            <label>
               <input name="existingValues" id="existingValues_overwrite" type="radio" class="with-gap" value="true" checked={ config.overwrite_existing } onchange={set.bind(this, config, 'overwrite_existing', true)}/>
               <span><b>Overwrite</b> existing values</span>
            </label>
         </div>

         <h3 class="col s12" style="margin-top: 2rem;">New values</h3>
         <div class="col s12" style="padding-left: 2.75rem;">
            <label>
               <input name="{config.element + 'newValues'}" type="radio" class="with-gap" value="number" checked={ config.type == 'number' } onchange={setWithEvent.bind(this, config, 'type')} />
               <span>Use numbers</span>
            </label>
            <br>

            <label style="margin-left: 3rem; margin-top: 0.75rem;">
               <input name="{config.element} + 'useNumbers'" type="radio" class="with-gap" disabled={config.type !== 'number'} checked={ !config.number_globally } onchange={set.bind(this, config, 'number_globally', false)}/>
               <span>Start at 0 in every entry</span>
            </label>
            <div style="margin-left: 3rem; display: flex; flex-wrap: wrap; align-items: baseline;">
               <label style="white-space: nowrap;">
                  <input style="margin-left: 0.75rem;" name="{config.element} + 'useNumbers'" type="radio" class="with-gap" disabled={config.type !== 'number'} checked={ config.number_globally } onchange={set.bind(this, config, 'number_globally', true)}/>
                  <span>Keep counting up, starting from</span>
               </label>
               <input type="text" style="margin-left: 0.75rem; flex-basis: 5ch; flex-grow: 1;" value={ config.number_next } onchange={setWithEvent.bind(this, config, 'number_next')}/>
               <button type="button" class="btn waves-effect waves-light" style="height: 3rem; flex-shrink: 0; margin-left: 0.75rem;" onclick={ findNext.bind(this, config) }>Find next number</button>
            </div>


            <label>
               <input name="{config.element + 'newValues'}" type="radio" class="with-gap" checked={ config.type == 'string'} onchange={set.bind(this, config, 'type', 'string')}/>
               <span>Use text</span>
            </label>

            <input style="margin-left: 3rem;" disabled={config.type !== 'string'} type="text" id="stringFormat" placeholder="%(headword)-%(pos)" value={ config.string_template } onchange={setWithEvent.bind(this, config, 'string_template')}/>


         </div>

      </div>
      <hr>
   </template>

   <div>
      <i class="material-symbols-outlined right">add</i>Add autonumbering to another element
      <select class="browser-default" id="newElement">
         <option each={el in getUnusedElements()} value={el}>{el}</option>
      </select>
      <button type="button" class="btn waves-effect waves-light" onclick={addElement}>Add</button>
   </div>


   <div if={state.info}
         class="section">
      <div class="message messageInfo">
         {state.info}
      </div>
   </div>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            info: "",
            data: {
            }
         },

         setWithEvent(config, prop, event) {
            if (typeof (config[prop]) === 'number') {
               const prev = config[prop]
               try {
                  config[prop] = parseInt(event.target.value, 10);
                  if (isNaN(config[prop])) config[prop] = prev;
               } catch (e) {
                  // ?
                  config[prop] = prev;
               }
            } else {
               config[prop] = event.target.value;
            }
            this.update();
         },
         set(config, prop, value) {
            config[prop] = value;
            this.update();
         },

         changeElement(config, event) {
            oldElement = config.element;
            newElement = event.target.value;
            console.log('changing element ->', oldElement, newElement)
            if (!oldElement || !newElement) return;

            this.state.data[newElement] = config;
            config.element = newElement;
            config.target = '';
            delete this.state.data[oldElement];
            this.update();
            event.target.value = newElement; // weird bug but the select goes out of sync otherwise

         },
         deleteElement(element) {
            if (!element) return;
            delete this.state.data[element];
            this.update();
         },
         addElement() {
            const element = document.getElementById('newElement').value
            if (!element) return;
            this.state.data[element] = this.getInitialConfig(element);
            this.update();
         },

         getInitialConfig(element) {
            return {
               overwrite_existing: false,
               auto_apply: false,
               number_next: 1,
               number_globally: true,
               string_template: '%(headword)-%(pos)',
               element,
               attribute: 'xml:id',
               type: 'number',
               target: ''
            }
         },
         getUnusedElements() {
            const xema = this.dictData && this.dictData.config && this.dictData.config.xema;
            if (xema && xema.elements) {
               return Object.keys(xema.elements).map(key => xema.elements[key].elementName || key).filter(el => !this.state.data[el]);
            }

            return [];
         },
         getAttributesForElement(element) {
            const xema = this.dictData && this.dictData.config && this.dictData.config.xema;
            return xema ? Object.keys(xema.elements[element].attributes || {}) : [];
         },
         getChildElementsForElement(element) {
            const xema = this.dictData && this.dictData.config && this.dictData.config.xema;
            return (xema.elements[element].children || []).map(c => xema.elements[c.name].elementName || c.name);
         },



         onMounted() {
            this.store.loadDictionaryConfig("autonumbering")
                  .done(response => {
                     this.state.data = response.content
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     M.updateTextFields()
                  })
         },

         addNumbers() {
            if (!confirm("Save config and start autonumbering?"))
               return;

            this.saveData().then(() => {
               this.update({ isSaving: true, info: 'Working on it...' });
               this.store
                  .autonumberElements()
                  .done(response => {
                     if(response.success) {
                        this.update({info: 'Auto-numbering finished, ' + response.processed + ' entries updated.'})
                     }
                  })
                  .always(() => this.update({isSaving: false}))
            })
         },

         findNext(config) {
            if (config && config.element) {
               this.update({
                  isSaving: true,
                  info: 'Working on it...'
               })
               this.store
                  .autonumberNext(config.element, config.target)
                  .done(response => {
                     config.number_next = response.next
                  })
                  .always(() => this.update({isSaving: false}))
            }
         },

         getConfigData() {
            return this.state.data;
         },

         saveData() {
            this.update({isSaving: true})
            return this.store.updateDictionaryConfig("autonumbering", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }

      }
   </script>

</dict-config-autonumber>
